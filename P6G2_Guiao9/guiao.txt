EX1---
Query   Rows    Cost    Pag. Reads      Time    Index used                          Index Op.
1       72591   .488    552             946     WorkOrderID                         Clustered Index Scan
2       1       .003    26              33      WorkOrderID                         Clustered Index Seek
3.1     11      .003    2               86      WorkOrderID                         Clustered Index Seek
3.2     72591   .473    554             908     WorkOrderID                         Clustered Index Seek
4       72591   .473    554             184     WorkOrderID                         Clustered Index Scan
5       9       .003    44              58      ProductID                           Nonclustered Index Seek
6.1     9       .003    2               18      ProductID cov StartDate             Nonclustered Index Seek
6.2     1105    .005    32              63      ProductID cov StartDate             Nonclustered Index Seek
6.3     1105    .005    34              25      ProductID cov StartDate             Nonclustered Index Seek
7       118     .003    241             115     ProductID                           Nonclustered Index Seek
7       183     .005    241             115     StartDate                           Nonclustered Index Seek
8       1       .003    246             46      ProductID comp StartDate            Nonclustered Index Seek



EX2--



--init
CREATE TABLE mytemp (
rid BIGINT IDENTITY (1, 1) NOT NULL,       
at1 INT NULL,
at2 INT NULL,
at3 INT NULL,
lixo varchar(100) NULL
);
--a =
ALTER TABLE mytemp ADD CONSTRAINT mytemp_pk PRIMARY KEY CLUSTERED (rid);


ALTER TABLE mytemp DROP CONSTRAINT mytemp_pk;
ALTER TABLE myTemp ADD CONSTRAINT mytemp_pk PRIMARY KEY CLUSTERED (rid) WITH (FILLFACTOR = 65), pad index=on;
--b codigo stor 

-- Record the Start Time
DECLARE @start_time DATETIME, @end_time DATETIME;
SET @start_time = GETDATE();
PRINT @start_time
-- Generate random records
DECLARE @val as int = 1;
DECLARE @nelem as int = 50000;
SET nocount ON
WHILE @val <= @nelem
BEGIN
	DBCC DROPCLEANBUFFERS; -- need to be sysadmin
	INSERT mytemp (rid, at1, at2, at3, lixo)
	SELECT cast((RAND()*@nelem*40000) as int), cast((RAND()*@nelem) as int),
		cast((RAND()*@nelem) as int), cast((RAND()*@nelem) as int),
		'lixo...lixo...lixo...lixo...lixo...lixo...lixo...lixo...lixo';
	SET @val = @val + 1;
END
PRINT 'Inserted ' + str(@nelem) + ' total records'
 -- Duration of Insertion Process
 SET @end_time = GETDATE();
PRINT 'Milliseconds used: ' + CONVERT(VARCHAR(20), DATEDIFF(MILLISECOND,
@start_time, @end_time));


--b results tempo= 48413 fragindex=98.76 %		ocupagina=68.47 %		ninserts=50000
--c results	tempo= 53583 fragindex=99.15 %		ocupagina=70.25 % 		ninserts=50000	fill=90					
--c results	tempo= 56650 fragindex=99.23 % 		ocupagina=63.10 %		ninserts=50000	fill=80	
--c results	tempo= 58993 fragindex=99.17 %		ocupagina=63.19 %		ninserts=50000	fill=65	
--d results	tempo= 27021 fragindex=98.57 %		ocupagina=66.42 %		ninserts=50000	fill=65	
--d results	tempo= 28102 fragindex=98.82 %		ocupagina=68.99 %		ninserts=50000	fill=80	
--d results	tempo= 35173 fragindex=99.02 %		ocupagina=68.17 %		ninserts=50000	fill=90	



-- e)
CREATE INDEX Idx1 ON mytemp(at1);
CREATE INDEX Idx2 ON mytemp(at2);
CREATE INDEX Idx3 ON mytemp(at3);
CREATE INDEX Idx4 ON mytemp(lixo)

--e conclusao-> a inserçao com todos os indices é substancialmente mais lenta pois tem que ser feita a mesma operaçao para cada indice 
--||||||||||||||||||||||||||||||||||||||
--EX3
-- i) por ssn
CREATE UNIQUE CLUSTERED INDEX IdxSsn ON employee (Ssn);

-- ii) com x 1st e y last names
CREATE INDEX IdxFnameLname ON employee (Fname, Lname);

-- iii) trabalham num dep
CREATE INDEX IdxDno ON employee (Dno);

-- iv) trabalham num projeto
CREATE CLUSTERED INDEX IdxEssnPno ON works_on (Essn, Pno);

-- v)dependentes de um ssn, apenas apos se retirar o index da PK
CREATE CLUSTERED INDEX IdxEssn ON dependent (Essn);

--vi) projetos num dep, apenas apos se retirar o index da PK
CREATE INDEX IdxDnum ON project (Dnum);